name: Build, Scan, and Push Docker Images (Reusable)
on:
  push:
    branches:
      - main
    paths:
      - "docker-config-*.yaml"

jobs:
  detect-updates:
    runs-on: self-hosted
    outputs:
      matrix: ${{ steps.detect-configs.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Detect updated docker-config files
        id: detect-configs
        run: |
          BEFORE_COMMIT=${{ github.event.before }}
          CURRENT_COMMIT=${{ github.sha }}

          echo "Comparing changes between $BEFORE_COMMIT and $CURRENT_COMMIT"

          UPDATED_FILES=$(git diff --name-only "$BEFORE_COMMIT" "$CURRENT_COMMIT" | grep "docker-config-.*\.yaml" || true)

          if [[ -z "$UPDATED_FILES" ]]; then
            echo "No docker-config files changed. Setting empty matrix."
            echo "matrix=[]" >> $GITHUB_ENV
          else
            echo "Updated files: $UPDATED_FILES"
            JSON_ARRAY=$(echo "$UPDATED_FILES" | jq -R -s -c 'split("\n") | map(select(. != ""))')
            echo "matrix=$JSON_ARRAY" >> $GITHUB_OUTPUT
          fi  

  build:
    needs: detect-updates
    runs-on: self-hosted
    if: needs.detect-updates.outputs.matrix != '[]'
    strategy:
      matrix:
        config_file: ${{ fromJson(needs.detect-updates.outputs.matrix || '[]') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Variables from Config File
        id: extract-vars
        run: |
          CONFIG_FILE="${{ matrix.config_file }}"
          echo "Processing $CONFIG_FILE..."

          ecr_repo_name=$(yq eval '.ecr_repo_name' "$CONFIG_FILE")
          docker_image_tag=$(yq eval '.docker_image_tag' "$CONFIG_FILE")
          dockerfile_location=$(yq eval '.dockerfile_location' "$CONFIG_FILE")
          account_name=$(yq eval '.account_name' "$CONFIG_FILE")
          region=$(yq eval '.region' "$CONFIG_FILE")

          echo "Extracted values:"
          echo "ECR Repo: $ecr_repo_name"
          echo "Docker Image Tag: $docker_image_tag"
          echo "Dockerfile Location: $dockerfile_location"
          echo "Account Name: $account_name"
          echo "Region: $region"

          echo "ecr_repo_name=$ecr_repo_name" >> $GITHUB_ENV
          echo "docker_image_tag=$docker_image_tag" >> $GITHUB_ENV
          echo "dockerfile_location=$dockerfile_location" >> $GITHUB_ENV
          echo "account_name=$account_name" >> $GITHUB_ENV
          echo "region=$region" >> $GITHUB_ENV

      - name: Validate Dockerfile Path
        run: |
          if [[ ! -f "$dockerfile_location" ]]; then
            echo "‚ùå Dockerfile not found at $dockerfile_location. Exiting."
            exit 1
          fi

      - name: Build Docker Image
        run: |
          IMAGE_TAG="$account_name/$ecr_repo_name:$docker_image_tag"
          echo "üöÄ Building Docker image: $IMAGE_TAG"
          docker build --no-cache -t "$IMAGE_TAG" -f "$dockerfile_location" .
          echo "‚úÖ Successfully built: $IMAGE_TAG"

      - name: Run Trivy Vulnerability Scan
        id: scan
        if: success()
        run: |
          echo "üîç Running Trivy scan on $IMAGE_TAG..."
          echo $IMAGE_TAG
          trivy image --format table --exit-code 1 --ignore-unfixed --pkg-types os,library --severity HIGH,CRITICAL "$account_name/$ecr_repo_name:$docker_image_tag" | tee trivy-results-${{ env.docker_image_tag }}.txt

  