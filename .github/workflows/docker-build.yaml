name: Docker Image Build & Push for PR Updates

on:
  push:
  # pull_request:
  #   types: [opened, synchronize, reopened, edited]
    branches:
      - feature/test-automation
    paths:
      - "docker-config-*.yaml"
jobs:
  detect-updates:
    runs-on: self-hosted
    outputs:
      matrix: ${{ steps.detect-configs.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for full diff

      - name: Detect updated docker-config files
        id: detect-configs
        shell: bash
        run: |
          git fetch origin main  # Replace with your default branch if not 'main'
          BASE_COMMIT=$(git merge-base HEAD origin/main)

          echo "üîç Comparing changes from $BASE_COMMIT to HEAD..."
          UPDATED_FILES=$(git diff --name-only --diff-filter=AMCR "$BASE_COMMIT" HEAD | grep "docker-config.*\.yaml" || true)

          if [[ -z "$UPDATED_FILES" ]]; then
            echo "matrix=[]" >> "$GITHUB_OUTPUT"
          else
            JSON_ARRAY=$(echo "$UPDATED_FILES" | jq -R -s -c 'split("\n") | map(select(. != ""))')
            echo "matrix=$JSON_ARRAY" >> "$GITHUB_OUTPUT"
          fi
  build:
    needs: detect-updates
    runs-on: self-hosted
    if: needs.detect-updates.outputs.matrix != '[]'
    strategy:
      matrix:
        config_file: ${{ fromJson(needs.detect-updates.outputs.matrix || '[]') }}
    permissions:
      id-token: write
      contents: read  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Variables from Config File
        id: extract-vars
        uses: ./.github/actions/extract-config-file
        with:
          config_file: ${{ matrix.config_file }}

      - name: Extract AWS Account Number
        uses: ./.github/actions/extract-account-number
        with:
          acc_name: ${{ steps.extract-vars.outputs.acc_name }}

      - name: Validate Dockerfile Path
        run: |
          if [[ ! -f "$dockerfile_location" ]]; then
            echo "‚ùå Dockerfile not found at $dockerfile_location. Exiting."
            exit 1
          fi
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::962923300779:role/github-actions-workflow-role
          aws-region: us-west-2
          
      - name: Fetch Slack secrets
        uses: ./.github/actions/fetch-slack-secret
        id: slack_secrets

      - name: Notify Build Started
        uses: ./.github/actions/slack-build-start
        with:
          slack_token: ${{ steps.slack_secrets.outputs.slack_token }}
          channel_id: ${{ steps.slack_secrets.outputs.channel_id }}
          repository: ${{ env.ecr_repo_name }}
          image_tag: ${{ env.release_tag }}
          
      - name: Build Docker image
        id: docker-build
        continue-on-error: true
        run: |
          docker build --no-cache . -f ${{ env.dockerfile_location }} -t ${{ env.account_number }}.dkr.ecr.${{ env.region }}.amazonaws.com/${{ env.ecr_repo_name }}:${{ env.release_tag }}
          
      - name: Notify Build completed
        if: steps.docker-build.outcome == 'success'
        uses: ./.github/actions/slack-build-complete
        with:
          slack_token: ${{ steps.slack_secrets.outputs.slack_token }}
          channel_id: ${{ steps.slack_secrets.outputs.channel_id }}
          repository: ${{ env.ecr_repo_name }}
          image_tag: ${{ env.release_tag }}

      - name: Notify Build Failed
        if: steps.docker-build.outcome == 'failure'
        uses: ./.github/actions/slack-build-failed
        with:
            slack_token: ${{ steps.slack_secrets.outputs.slack_token }}
            channel_id: ${{ steps.slack_secrets.outputs.channel_id }}
            repository: ${{ env.ecr_repo_name }}
            image_tag: ${{ env.release_tag }}

      - name: Force Fail After Notification
        if: steps.docker-build.outcome == 'failure'
        run: exit 1

  scan:
    needs: [detect-updates, build]
    runs-on: self-hosted
    strategy:
      matrix:
        config_file: ${{ fromJson(needs.detect-updates.outputs.matrix || '[]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Variables from Config File
        id: extract-vars
        uses: ./.github/actions/extract-config-file
        with:
          config_file: ${{ matrix.config_file }}

      - name: Extract AWS Account Number
        uses: ./.github/actions/extract-account-number
        with:
          acc_name: ${{ steps.extract-vars.outputs.acc_name }}

      - name: Run Trivy Vulnerability Scan
        id: scan
        run: |
          IMAGE_TAG="$account_number.dkr.ecr.$region.amazonaws.com/$ecr_repo_name:$release_tag"
          echo "üîç Running Trivy scan on $IMAGE_TAG..."
          trivy image --format table --ignore-unfixed --pkg-types os,library --severity HIGH,CRITICAL "$IMAGE_TAG" | tee trivy-results-${{ env.release_tag }}.txt
          VULN_COUNT=$(trivy image --format json --ignore-unfixed --pkg-types os,library --severity HIGH,CRITICAL "$IMAGE_TAG" | jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH" or .Severity=="CRITICAL")] | length')

          if [[ "${{ env.skip_vulnerability }}" == "true" ]]; then
            echo "‚ö†Ô∏è Skipping vulnerability enforcement as per user input."
          elif [[ "$VULN_COUNT" -gt 0 ]]; then
            echo "‚ùå Vulnerabilities found. Failing the job."
            exit 1
          else
            echo "‚úÖ No HIGH/CRITICAL vulnerabilities found. Proceeding."
          fi
      - name: Send Slack Approval Request
        if: steps.scan.outcome == 'success'
        uses: ./.github/actions/send-approval-slack
        with:
          slack_token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
          repository: ${{ env.ecr_repo_name }}
          image_tag: ${{ env.release_tag }}
      - name: ‚è∏ Wait for Slack Approval Window (5 minutes)
        run: |
          echo "‚è≥ Waiting for 5 minutes before checking approval..."
          sleep 60  # Sleep for 300 seconds = 5 minutes


  wait_for_approval:
    runs-on: self-hosted
    strategy:
      matrix:
        config_file: ${{ fromJson(needs.detect-updates.outputs.matrix || '[]') }}
    needs: [detect-updates, build, scan]
    outputs:
      status: ${{ steps.get_decision.outputs.status }}
    steps:
      - name: Extract Variables from Config File
        id: extract-vars
        uses: ./.github/actions/extract-config-file
        with:
          config_file: ${{ matrix.config_file }}

      - name: Fetch approval status from DynamoDB
        id: get_decision
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-west-2
          IMAGE_TAG: ${{ env.ecr_repo_name }}
          DECISION_KEY: latest
          TABLE: SlackApprovals
        run: |
          for i in {1..30}; do
            echo "üîÅ Poll attempt #$i..."

            result=$(aws dynamodb get-item \
              --table-name "$TABLE" \
              --key "{\"image_tag\": {\"S\": \"$IMAGE_TAG\"}, \"decision\": {\"S\": \"$DECISION_KEY\"}}" \
              --region "$AWS_REGION" \
              --output json 2>/dev/null || echo "{}")

            echo "üîç Raw result: $result"

            STATUS=$(echo "$result" | jq -r '.Item.status.S // "none"')
            echo "üì¶ Retrieved status: $STATUS"

            if [[ "$STATUS" == "approve" ]]; then
              echo "‚úÖ Approved"
              echo "status=approve" >> "$GITHUB_OUTPUT"
              exit 0
            elif [[ "$STATUS" == "reject" ]]; then
              echo "‚ùå Rejected"
              echo "status=reject" >> "$GITHUB_OUTPUT"
              exit 0
            fi

            sleep 10
          done

          echo "‚è∞ Timeout waiting for approval in DynamoDB"
          echo "status=timeout" >> "$GITHUB_OUTPUT"
          exit 1


  push:
    needs: wait_for_approval
    if: needs.wait_for_approval.outputs.status == 'approve'
    runs-on: self-hosted
    steps:
      - name: Push Docker Image
        run: echo "‚úÖ Image approved. Pushing to ECR..."

  reject_handler:
    needs: wait_for_approval
    if: needs.wait_for_approval.outputs.status == 'reject'
    runs-on: self-hosted
    steps:
      - name: Stop Deployment
        run: echo "‚ùå Deployment rejected by Slack."

  # push:
  #   needs: [detect-updates, build, scan]
  #   runs-on: self-hosted
   #   environment:
   #     name: Release
  #   strategy:
  #     matrix:
  #       config_file: ${{ fromJson(needs.detect-updates.outputs.matrix || '[]') }}
  #   permissions:
  #     id-token: write
  #     contents: read
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Extract Variables from Config File
  #       id: extract-vars
  #       uses: ./.github/actions/extract-config-file
  #       with:
  #         config_file: ${{ matrix.config_file }}

  #     - name: Extract AWS Account Number
  #       uses: ./.github/actions/extract-account-number
  #       with:
  #         acc_name: ${{ steps.extract-vars.outputs.acc_name }}

  # #     - name: Role Assume
  # #       uses: aws-actions/configure-aws-credentials@v4
  # #       with:
  # #         role-to-assume: arn:aws:iam::${{ env.account_number }}:role/${{ env.account_name }}-ghact-role-github-actions-assume-role
  # #         aws-region: ${{ env.region }}

  # #     - name: ECR Repo login
  # #       uses: aws-actions/amazon-ecr-login@v1
  # #       id: ecr

  #     - name: Push Docker Image to ECR
  #       run: |
  #         echo "pushed docker image !!!"
#docker push ${{ env.account_number }}.dkr.ecr.${{ env.region }}.amazonaws.com/${{ env.ecr_repo_name }}:${{ env.release_tag }}

  #     - name: Cleaning image from runner
  #       run: |
  #         docker rmi ${{ env.account_number }}.dkr.ecr.${{ env.region }}.amazonaws.com/${{ env.ecr_repo_name }}:${{ env.release_tag }}
    